//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Member", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class Member : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUser", ReplyAction="http://tempuri.org/IService1/GetAllUserResponse")]
        MvcClient.ServiceReference1.Member[] GetAllUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUser", ReplyAction="http://tempuri.org/IService1/GetAllUserResponse")]
        System.Threading.Tasks.Task<MvcClient.ServiceReference1.Member[]> GetAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMemberById", ReplyAction="http://tempuri.org/IService1/GetMemberByIdResponse")]
        MvcClient.ServiceReference1.Member GetMemberById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMemberById", ReplyAction="http://tempuri.org/IService1/GetMemberByIdResponse")]
        System.Threading.Tasks.Task<MvcClient.ServiceReference1.Member> GetMemberByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMemberById", ReplyAction="http://tempuri.org/IService1/DeleteMemberByIdResponse")]
        int DeleteMemberById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMemberById", ReplyAction="http://tempuri.org/IService1/DeleteMemberByIdResponse")]
        System.Threading.Tasks.Task<int> DeleteMemberByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMember", ReplyAction="http://tempuri.org/IService1/AddMemberResponse")]
        int AddMember(string UserName, string Email, string Phone, string Address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMember", ReplyAction="http://tempuri.org/IService1/AddMemberResponse")]
        System.Threading.Tasks.Task<int> AddMemberAsync(string UserName, string Email, string Phone, string Address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateMember", ReplyAction="http://tempuri.org/IService1/UpdateMemberResponse")]
        int UpdateMember(int Id, string UserName, string Email, string Phone, string Address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateMember", ReplyAction="http://tempuri.org/IService1/UpdateMemberResponse")]
        System.Threading.Tasks.Task<int> UpdateMemberAsync(int Id, string UserName, string Email, string Phone, string Address);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MvcClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MvcClient.ServiceReference1.IService1>, MvcClient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MvcClient.ServiceReference1.Member[] GetAllUser() {
            return base.Channel.GetAllUser();
        }
        
        public System.Threading.Tasks.Task<MvcClient.ServiceReference1.Member[]> GetAllUserAsync() {
            return base.Channel.GetAllUserAsync();
        }
        
        public MvcClient.ServiceReference1.Member GetMemberById(int Id) {
            return base.Channel.GetMemberById(Id);
        }
        
        public System.Threading.Tasks.Task<MvcClient.ServiceReference1.Member> GetMemberByIdAsync(int Id) {
            return base.Channel.GetMemberByIdAsync(Id);
        }
        
        public int DeleteMemberById(int Id) {
            return base.Channel.DeleteMemberById(Id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMemberByIdAsync(int Id) {
            return base.Channel.DeleteMemberByIdAsync(Id);
        }
        
        public int AddMember(string UserName, string Email, string Phone, string Address) {
            return base.Channel.AddMember(UserName, Email, Phone, Address);
        }
        
        public System.Threading.Tasks.Task<int> AddMemberAsync(string UserName, string Email, string Phone, string Address) {
            return base.Channel.AddMemberAsync(UserName, Email, Phone, Address);
        }
        
        public int UpdateMember(int Id, string UserName, string Email, string Phone, string Address) {
            return base.Channel.UpdateMember(Id, UserName, Email, Phone, Address);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMemberAsync(int Id, string UserName, string Email, string Phone, string Address) {
            return base.Channel.UpdateMemberAsync(Id, UserName, Email, Phone, Address);
        }
    }
}
